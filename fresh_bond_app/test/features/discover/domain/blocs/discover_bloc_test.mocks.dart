// Mocks generated by Mockito 5.4.5 from annotations
// in fresh_bond_app/test/features/discover/domain/blocs/discover_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fresh_bond_app/core/utils/logger.dart' as _i5;
import 'package:fresh_bond_app/features/discover/domain/models/connection_model.dart'
    as _i4;
import 'package:fresh_bond_app/features/discover/domain/repositories/connections_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ConnectionsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionsRepository extends _i1.Mock
    implements _i2.ConnectionsRepository {
  MockConnectionsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ConnectionModel>> getRecommendedConnections() =>
      (super.noSuchMethod(
            Invocation.method(#getRecommendedConnections, []),
            returnValue: _i3.Future<List<_i4.ConnectionModel>>.value(
              <_i4.ConnectionModel>[],
            ),
          )
          as _i3.Future<List<_i4.ConnectionModel>>);

  @override
  _i3.Future<List<_i4.ConnectionModel>> searchConnections(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchConnections, [query]),
            returnValue: _i3.Future<List<_i4.ConnectionModel>>.value(
              <_i4.ConnectionModel>[],
            ),
          )
          as _i3.Future<List<_i4.ConnectionModel>>);

  @override
  _i3.Future<bool> sendConnectionRequest(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#sendConnectionRequest, [userId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> acceptConnectionRequest(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#acceptConnectionRequest, [userId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> rejectConnectionRequest(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#rejectConnectionRequest, [userId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.ConnectionModel>> getPendingRequests() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingRequests, []),
            returnValue: _i3.Future<List<_i4.ConnectionModel>>.value(
              <_i4.ConnectionModel>[],
            ),
          )
          as _i3.Future<List<_i4.ConnectionModel>>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i5.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void v(String? message, {dynamic error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(String? message, {dynamic error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(String? message, {dynamic error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(String? message, {dynamic error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(String? message, {dynamic error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void wtf(String? message, {dynamic error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );
}
